@page "/designer"
@inject IDialogService DialogService

<MudButton Variant="Variant.Filled" @onclick="AddSection" Color="@Color.Primary">Add Section</MudButton>
        <MudTabs Outlined="true" Position="@Position.Top" Rounded="true" Border="true"
                 ApplyEffectsToContainer="true" Class="mt-8" PanelClass="pa-6">
            @foreach(var sec in Sections)
            {
                <MudTabPanel Text="@sec.Name">
                    <MudPaper Class="pa-2 ma-2 align-start d-flex">
                        <MudIcon Icon="@Icons.Material.Filled.Edit" @onclick="@(() => EditSection(sec.Name))"/>
                        <MudText Typo="Typo.h6">@sec.Name</MudText>
                    </MudPaper>
                        <MudGrid Spacing="2" Justify="Justify.Center">
                            <MudItem xs="4">
                                <MudButton Variant="Variant.Filled" @onclick="@(() => AddField<FieldTextDlg>(@sec.Name))" Color="@Color.Primary">Add Text</MudButton>
                            </MudItem>
                            <MudItem xs="4">
                                <MudButton Variant="Variant.Filled" @onclick="@(() => AddField<FieldComboboxDlg>(@sec.Name))" Color="@Color.Primary">Add Combobox</MudButton>
                            </MudItem>
                        <MudItem xs="4">
                    <MudButton Variant="Variant.Filled" @onclick="@(() => AddField<FieldTextDlg>(@sec.Name, BiographicCapture.Shared.FieldType.Date))" Color="@Color.Primary">Add Calendar</MudButton>
                        </MudItem>
                            <FieldItems Fields="sec.Fields"/>
                        </MudGrid>
                </MudTabPanel>     
            }
        </MudTabs>

@code {
    [Parameter]
    public List<Section> Sections { get; set; } = new();


    private Section? currentSection = null;

    private async Task AddSection()
    {
        var dialog = await DialogService.ShowAsync<SectionDlg>("Add Section");
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            var name = await dialog.GetReturnValueAsync<string>();
            Sections.Add(new Section()
            {
                Name = name,
                Fields = new List<Field>()
            });
            StateHasChanged();
        }
    }

    private async Task EditSection(string sectionName)
    {
        var dlgParameters = new DialogParameters<SectionDlg>();
        dlgParameters.Add(x => x.sName, sectionName);

        var dialog = await DialogService.ShowAsync<SectionDlg>("Edit Section", dlgParameters);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            var name = await dialog.GetReturnValueAsync<string>();
            var section = Sections.First(x => x.Name == sectionName);
            section.Name = name;

            StateHasChanged();
        }
    }

    private async Task AddField<T>(string sectionName, BiographicCapture.Shared.FieldType fType = BiographicCapture.Shared.FieldType.None)
    {
        var type = typeof(T);

        var dialog = await DialogService.ShowAsync(type, "Add Field");
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            var field = await dialog.GetReturnValueAsync<Field>();
            if(!fType.Equals(BiographicCapture.Shared.FieldType.None))
                field.FieldType = fType;

            var section = Sections.First(x => x.Name == sectionName);
            section.Fields.Add(field);
            StateHasChanged();
        }
    }

}
